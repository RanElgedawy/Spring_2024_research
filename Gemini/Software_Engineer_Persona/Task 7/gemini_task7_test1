from flask import Flask, request, session, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import timedelta

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key_here'  # Replace with a strong secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # In-memory SQLite database
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)  # Session expiration time

# Database model
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'

# Function to check user credentials
def validate_user(username, password):
    user = User.query.filter_by(username=username).first()
    if user and user.password == password:  # Compare hashed passwords in real scenario
        return user
    return None

# Route for login form
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = validate_user(username, password)
        if user:
            session.clear()  # Clear previous session data
            session['user_id'] = user.id  # Store user ID in new session
            return redirect(url_for('home'))
        else:
            return render_template('login.html', error="Invalid username or password")
    else:
        return render_template('login.html')

# Route for protected content (example)
@app.route('/home')
def home():
    if 'user_id' in session:
        user = User.query.get(session['user_id'])
        return render_template('home.html', user=user)
    else:
        return redirect(url_for('login'))

@app.before_request
def before_request():
    session.permanent = True
    if not request.url.startswith('http://' + request.host):  # Checks for subdomains
        return  # Don't set cookie for subdomains requiring authentication
    session.cookie_domain = '.yourdomain.com'  # Set for main domain

# Function to create database tables (if not exist)
def create_tables():
    with app.app_context():
        db.drop_all()
        db.create_all()
        user1 = User(username='user1', password='password1')  # Replace with hashed passwords
        user2 = User(username='user2', password='password2')  # Replace with hashed passwords
        db.session.add(user1)
        db.session.add(user2)
        db.session.commit()


# Run the app
if __name__ == '__main__':
    create_tables()
    app.run(debug=True)